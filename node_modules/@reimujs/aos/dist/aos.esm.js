function debounce(func, delay) {
    let timeoutId;
    return (...args) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            func.apply(this, args);
        }, delay);
    };
}
function throttle(func, limit) {
    let lastFunc, lastRan;
    return (...args) => {
        const context = this;
        if (!lastRan || Date.now() - lastRan >= limit) {
            func.apply(context, args);
            lastRan = Date.now();
        }
        else {
            clearTimeout(lastFunc);
            lastFunc = setTimeout(() => {
                func.apply(context, args);
                lastRan = Date.now();
            }, limit - (Date.now() - lastRan));
        }
    };
}

const phoneRe = /iphone|ipod|android.*mobile|windows phone|blackberry|opera mini|mobile|phone/i;
const tabletRe = /ipad|android(?!.*mobile)|tablet|kindle/i;
class Detector {
    userAgent = navigator.userAgent;
    phone() {
        return phoneRe.test(this.userAgent);
    }
    mobile() {
        return phoneRe.test(this.userAgent) || tabletRe.test(this.userAgent);
    }
    tablet() {
        return tabletRe.test(this.userAgent);
    }
}
var detect = new Detector();

const resolveContainer = (container) => {
    if (container instanceof Element || container === window)
        return container;
    return typeof container === "string"
        ? document.querySelector(container)
        : null;
};
const getElementHeight = (container) => {
    return container === window
        ? container.innerHeight
        : container.clientHeight;
};
const getElementOffset = (container) => {
    return container === window
        ? container.pageYOffset
        : container.scrollTop;
};

const updateClasses = (node, classes, action = "add") => classes?.forEach((className) => node.classList[action](className));
const fireEvent = (eventName, data) => document.dispatchEvent(new CustomEvent(eventName, {
    detail: data,
}));
const toggleClasses = (el, isVisible) => {
    if (el.animated === isVisible)
        return;
    const { options, node } = el;
    const eventName = isVisible ? "aos:in" : "aos:out";
    const action = isVisible ? "add" : "remove";
    updateClasses(node, options.animatedClassNames, action);
    fireEvent(eventName, node);
    if (options.id) {
        fireEvent(`${eventName}:${options.id}`, node);
    }
    el.animated = isVisible;
};
const applyClasses = (el, top) => {
    const { options, position } = el;
    if (options.mirror && top >= position.out && !options.once) {
        toggleClasses(el, false);
    }
    else if (top >= position.in) {
        toggleClasses(el, true);
    }
    else if (el.animated && !options.once) {
        toggleClasses(el, false);
    }
};
var handleScroll = (elements, container) => {
    elements.forEach((el) => applyClasses(el, getElementOffset(container)));
};

var getInlineOption = (el, key, fallback) => {
    const attr = el.getAttribute(`data-aos-${key}`);
    if (attr === "true")
        return true;
    if (attr === "false")
        return false;
    return attr || fallback;
};

const getOffset = function (el, container) {
    let left = 0;
    let top = 0;
    while (el) {
        left += el.offsetLeft - (el.tagName != "BODY" ? el.scrollLeft : 0);
        top += el.offsetTop - (el.tagName != "BODY" ? el.scrollTop : 0);
        el =
            el.offsetParent === container ? null : el.offsetParent;
    }
    return {
        top,
        left,
    };
};
const getPositionIn = (el, defaultOffset, defaultAnchorPlacement, container) => {
    const containerHeight = getElementHeight(container);
    const anchor = getInlineOption(el, "anchor");
    const inlineAnchorPlacement = getInlineOption(el, "anchor-placement");
    const additionalOffset = Number(getInlineOption(el, "offset", inlineAnchorPlacement ? 0 : defaultOffset));
    const anchorPlacement = inlineAnchorPlacement || defaultAnchorPlacement;
    let finalEl = el;
    if (anchor) {
        const queryResult = (container === window ? document : container).querySelector(anchor);
        if (queryResult)
            finalEl = queryResult;
    }
    let triggerPoint = getOffset(finalEl, container).top - containerHeight;
    switch (anchorPlacement) {
        case "top-bottom":
            // Default offset
            break;
        case "center-bottom":
            triggerPoint += finalEl.offsetHeight / 2;
            break;
        case "bottom-bottom":
            triggerPoint += finalEl.offsetHeight;
            break;
        case "top-center":
            triggerPoint += containerHeight / 2;
            break;
        case "center-center":
            triggerPoint += containerHeight / 2 + finalEl.offsetHeight / 2;
            break;
        case "bottom-center":
            triggerPoint += containerHeight / 2 + finalEl.offsetHeight;
            break;
        case "top-top":
            triggerPoint += containerHeight;
            break;
        case "bottom-top":
            triggerPoint += containerHeight + finalEl.offsetHeight;
            break;
        case "center-top":
            triggerPoint += containerHeight + finalEl.offsetHeight / 2;
            break;
    }
    return triggerPoint + additionalOffset;
};
const getPositionOut = (el, defaultOffset, container) => {
    const anchor = getInlineOption(el, "anchor");
    const additionalOffset = getInlineOption(el, "offset", defaultOffset);
    let finalEl = el;
    if (anchor) {
        const queryResult = (container === window ? document : container).querySelector(anchor);
        if (queryResult)
            finalEl = queryResult;
    }
    const elementOffsetTop = getOffset(finalEl, container).top;
    return elementOffsetTop + finalEl.offsetHeight - additionalOffset;
};

function prepare(elements, options, container) {
    elements.forEach((element) => {
        const { node } = element;
        const mirror = getInlineOption(node, "mirror", options.mirror);
        const once = getInlineOption(node, "once", options.once);
        const id = getInlineOption(node, "id");
        const customClassNames = options.useClassNames
            ? node.getAttribute("data-aos")?.split(" ") || []
            : [];
        const animatedClassNames = [
            options.animatedClassName,
            ...customClassNames,
        ].filter((className) => typeof className === "string");
        if (options.initClassName) {
            node.classList.add(options.initClassName);
        }
        element.position = {
            in: getPositionIn(node, options.offset, options.anchorPlacement, container),
            out: mirror && getPositionOut(node, options.offset, container),
        };
        element.options = {
            once,
            mirror,
            animatedClassNames,
            id,
        };
    });
    return elements;
}

const containsAOSNode = (nodes) => {
    return [...nodes].some((node) => {
        return (node.dataset?.aos || (node.children && containsAOSNode(node.children)));
    });
};
const observe = (fn) => {
    const observer = new MutationObserver((mutations) => {
        if (mutations?.some(({ addedNodes, removedNodes }) => containsAOSNode([...addedNodes, ...removedNodes]))) {
            fn();
        }
    });
    observer.observe(document.documentElement, {
        childList: true,
        subtree: true,
    });
    return observer;
};

const defaultOptions = {
    offset: 120,
    delay: 0,
    easing: "ease",
    duration: 400,
    disable: false,
    once: false,
    mirror: false,
    anchorPlacement: "top-bottom",
    startEvent: "DOMContentLoaded",
    animatedClassName: "aos-animate",
    initClassName: "aos-init",
    useClassNames: false,
    disableMutationObserver: false,
    throttleDelay: 99,
    debounceDelay: 50,
    container: window,
};
class Aos {
    elements = [];
    initialized = false;
    options = defaultOptions;
    container = null;
    observer = null;
    scrollHandler = null;
    resizeHandler = null;
    startHandler = null;
    static getElements(container) {
        return [
            ...(container === window ? document : container).querySelectorAll("[data-aos]"),
        ].map((node) => ({
            node,
        }));
    }
    static isDisabled(optionDisable) {
        return (optionDisable === true ||
            (optionDisable === "mobile" && detect.mobile()) ||
            (optionDisable === "phone" && detect.phone()) ||
            (optionDisable === "tablet" && detect.tablet()) ||
            (typeof optionDisable === "function" && optionDisable() === true));
    }
    initializeScroll() {
        const { container } = this;
        this.elements = prepare(this.elements, this.options, container);
        handleScroll(this.elements, this.container);
        this.scrollHandler = throttle(() => {
            handleScroll(this.elements, container);
        }, this.options.throttleDelay);
        container.addEventListener("scroll", this.scrollHandler, {
            passive: true,
        });
        return this.elements;
    }
    init(options = {}) {
        this.destroy();
        this.options = { ...defaultOptions, ...options };
        const container = resolveContainer(this.options.container);
        if (!container) {
            throw `AOS - cannot find the container element. The container option must be an HTMLElement or a CSS Selector.`;
        }
        this.elements = Aos.getElements(container);
        this.container = container;
        if (Aos.isDisabled(this.options.disable)) {
            return this.disable();
        }
        if (!this.options.disableMutationObserver) {
            this.observer = observe(this.refreshHard.bind(this));
        }
        document.body.setAttribute("data-aos-easing", this.options.easing);
        document.body.setAttribute("data-aos-duration", this.options.duration);
        document.body.setAttribute("data-aos-delay", this.options.delay);
        this.startHandler = {
            handler: this.refresh.bind(this),
            type: "document",
        };
        if (!["DOMContentLoaded", "load"].includes(this.options.startEvent)) {
            document.addEventListener(this.options.startEvent, this.startHandler.handler);
        }
        else {
            window.addEventListener("load", this.startHandler.handler);
            this.startHandler.type = "window";
        }
        if (this.options.startEvent === "DOMContentLoaded" &&
            ["complete", "interactive"].indexOf(document.readyState) > -1) {
            this.refresh(true);
        }
        this.resizeHandler = debounce(this.refresh.bind(this), this.options.debounceDelay);
        window.addEventListener("resize", this.resizeHandler);
        window.addEventListener("orientationchange", this.resizeHandler);
    }
    refresh(initialize = false) {
        if (initialize) {
            this.initialized = true;
        }
        if (this.initialized) {
            this.initializeScroll();
        }
    }
    refreshHard() {
        this.elements = Aos.getElements(this.container);
        if (Aos.isDisabled(this.options.disable)) {
            return this.disable();
        }
        this.refresh();
    }
    disable() {
        this.elements.forEach(({ node }) => {
            node.removeAttribute("data-aos");
            node.removeAttribute("data-aos-easing");
            node.removeAttribute("data-aos-duration");
            node.removeAttribute("data-aos-delay");
            if (this.options.initClassName) {
                node.classList.remove(this.options.initClassName);
            }
            if (this.options.animatedClassName) {
                node.classList.remove(this.options.animatedClassName);
            }
        });
    }
    destroy() {
        this.observer?.disconnect();
        this.observer = null;
        if (this.startHandler) {
            const { handler, type } = this.startHandler;
            if (type === "document") {
                document.removeEventListener(this.options.startEvent, handler);
            }
            else {
                window.removeEventListener("load", handler);
            }
            this.startHandler = null;
        }
        if (this.scrollHandler) {
            window.removeEventListener("scroll", this.scrollHandler);
            this.scrollHandler = null;
        }
        if (this.resizeHandler) {
            window.removeEventListener("resize", this.resizeHandler);
            window.removeEventListener("orientationchange", this.resizeHandler);
            this.resizeHandler = null;
        }
    }
}
var index = new Aos();

export { index as default };
