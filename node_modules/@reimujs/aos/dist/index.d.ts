type AosEventType = "aos:in" | "aos:out";
interface AosEvent extends Event {
    detail: Element;
}
declare global {
    interface Document {
        addEventListener(type: AosEventType, listener: (event: AosEvent) => void, options?: boolean | AddEventListenerOptions): void;
    }
}
type easingOptions = "linear" | "ease" | "ease-in" | "ease-out" | "ease-in-out" | "ease-in-back" | "ease-out-back" | "ease-in-out-back" | "ease-in-sine" | "ease-out-sine" | "ease-in-out-sine" | "ease-in-quad" | "ease-out-quad" | "ease-in-out-quad" | "ease-in-cubic" | "ease-out-cubic" | "ease-in-out-cubic" | "ease-in-quart" | "ease-out-quart" | "ease-in-out-quart";
type anchorPlacementOptions = "top-bottom" | "top-center" | "top-top" | "center-bottom" | "center-center" | "center-top" | "bottom-bottom" | "bottom-center" | "bottom-top";
export interface Options {
    offset: number;
    delay: number;
    easing: easingOptions;
    duration: number;
    disable: boolean | "mobile" | "phone" | "tablet" | (() => boolean);
    once: boolean;
    mirror: boolean;
    anchorPlacement: anchorPlacementOptions;
    startEvent: string;
    animatedClassName: string;
    initClassName: string;
    useClassNames: boolean;
    disableMutationObserver: boolean;
    throttleDelay: number;
    debounceDelay: number;
    container: Window | Element | string;
}
export interface ElementNode {
    node: HTMLElement;
    position?: {
        in: number;
        out?: number;
    };
    options?: {
        once: boolean;
        mirror: boolean;
        animatedClassNames: string[];
        id: string;
    };
    animated?: boolean;
}
declare class Aos {
    elements: ElementNode[];
    initialized: boolean;
    options: Options;
    container: Window | Element | null;
    observer: MutationObserver | null;
    scrollHandler: (...args: any[]) => void | null;
    resizeHandler: (...args: any[]) => void | null;
    startHandler: {
        handler: (...args: any[]) => void;
        type: "document" | "window";
    } | null;
    static getElements(container: Window | Element): ElementNode[];
    static isDisabled(optionDisable: boolean | "mobile" | "phone" | "tablet" | (() => boolean)): boolean;
    initializeScroll(): ElementNode[];
    init(options?: Partial<Options>): void;
    refresh(initialize?: boolean): void;
    refreshHard(): void;
    disable(): void;
    destroy(): void;
}
declare const _default: Aos;
export default _default;
